# Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
# find the sum of the even-valued terms.

class Fibonacci

  def initialize(limit)
    @limit = limit
  end

  def fibonacci_even
    fibonacci = [1, 1]
    (1...@limit).each { fibonacci << fibonacci.last(2).sum }
    fibo_even = fibonacci.select { |num| num.even? }.sum
  end

end

#----------------Test------------------

require 'minitest/autorun'

class FibonacciTest < Minitest::Test

  def setup
    @number = Fibonacci.new(10)
  end

  def test_instance_of_fobonacci
    assert_instance_of(Fibonacci, @number)
  end

  def test_fibonacci_even
    assert_equal(44, @number.fibonacci_even)
  end

end

#----------------TestSpecs------------------
describe Fibonacci do

  before do
    @num = Fibonacci.new(10)
  end

  describe "when insert a limit" do
    it "must gets the result of the sum of the even-valued fibonacci" do
      @num.fibonacci_even.must_equal 44
    end
  end

end
